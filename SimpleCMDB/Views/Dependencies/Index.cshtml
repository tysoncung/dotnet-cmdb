@model SimpleCMDB.ViewModels.DependencyViewModel

@{
    ViewData["Title"] = "Infrastructure Deployment";
    var servers = Model.Services.Select(s => s.Server).Where(s => s != null).Distinct().ToList();
}

<h1>Infrastructure Deployment & Dependencies</h1>

<ul class="nav nav-tabs mb-3" id="viewTabs" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="deployment-tab" data-bs-toggle="tab" data-bs-target="#deployment" type="button" role="tab">
            <i class="bi bi-diagram-3"></i> Deployment Diagram
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="dependency-tab" data-bs-toggle="tab" data-bs-target="#dependency" type="button" role="tab">
            <i class="bi bi-arrow-left-right"></i> Service Dependencies
        </button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="list-tab" data-bs-toggle="tab" data-bs-target="#list" type="button" role="tab">
            <i class="bi bi-list-ul"></i> List View
        </button>
    </li>
</ul>

<div class="tab-content" id="viewTabContent">
    <div class="tab-pane fade show active" id="deployment" role="tabpanel">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Server Deployment Architecture</h5>
            </div>
            <div class="card-body">
                <div id="deploymentNetwork" style="height: 700px; border: 1px solid #ddd;"></div>
                <div class="mt-2">
                    <button onclick="resetDeploymentView()" class="btn btn-sm btn-secondary">
                        <i class="bi bi-arrow-counterclockwise"></i> Reset View
                    </button>
                    <button onclick="togglePhysics()" class="btn btn-sm btn-info">
                        <i class="bi bi-lightning"></i> Toggle Physics
                    </button>
                    <span class="ms-3 text-muted">
                        <i class="bi bi-info-circle"></i> Click and drag to pan, scroll to zoom, double-click nodes for details
                    </span>
                </div>
            </div>
        </div>
    </div>

    <div class="tab-pane fade" id="dependency" role="tabpanel">
        <div class="card">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0">Service Dependency Network</h5>
            </div>
            <div class="card-body">
                <div id="dependencyNetwork" style="height: 700px; border: 1px solid #ddd;"></div>
                <div class="mt-2">
                    <button onclick="resetDependencyView()" class="btn btn-sm btn-secondary">
                        <i class="bi bi-arrow-counterclockwise"></i> Reset View
                    </button>
                    <span class="ms-3 text-muted">
                        <i class="bi bi-info-circle"></i> Arrows show dependencies (source → target)
                    </span>
                </div>
            </div>
        </div>
    </div>

    <div class="tab-pane fade" id="list" role="tabpanel">
        <div class="card">
            <div class="card-body">
                <p>
                    <a asp-action="Create" class="btn btn-primary">
                        <i class="bi bi-plus-circle"></i> Add Dependency
                    </a>
                </p>
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Source Service</th>
                                <th>Source Server</th>
                                <th>→</th>
                                <th>Target Service</th>
                                <th>Target Server</th>
                                <th>Description</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var item in Model.Dependencies) {
                            <tr>
                                <td><strong>@item.SourceService?.ServiceName</strong></td>
                                <td class="text-muted">@item.SourceService?.Server?.Hostname</td>
                                <td>→</td>
                                <td><strong>@item.TargetService?.ServiceName</strong></td>
                                <td class="text-muted">@item.TargetService?.Server?.Hostname</td>
                                <td><small>@item.Description</small></td>
                                <td>
                                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">
                                        <i class="bi bi-trash"></i>
                                    </a>
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<!-- vis.js library -->
<script src="https://unpkg.com/vis-network@latest/dist/vis-network.min.js"></script>
<link href="https://unpkg.com/vis-network@latest/dist/dist/vis-network.min.css" rel="stylesheet" />

<script>
    let deploymentNetwork = null;
    let dependencyNetwork = null;
    let physicsEnabled = true;

    document.addEventListener('DOMContentLoaded', function() {
        initDeploymentDiagram();
        initDependencyNetwork();
    });

    function initDeploymentDiagram() {
        // Prepare data from the model - internal services grouped by server
        const servers = @Html.Raw(Json.Serialize(Model.Services
            .Where(s => s.Server != null && !s.IsExternal)
            .GroupBy(s => s.Server.Id)
            .Select(g => new {
                id = g.Key,
                hostname = g.First().Server.Hostname,
                ip = g.First().Server.IpAddress,
                os = g.First().Server.OsType,
                environment = g.First().Server.Environment,
                status = g.First().Server.Status,
                services = g.Select(s => new {
                    id = s.Id,
                    name = s.ServiceName,
                    port = s.Port,
                    status = s.Status,
                    app = s.Application?.Name
                }).ToList()
            })));

        // External services
        const externalServices = @Html.Raw(Json.Serialize(Model.Services
            .Where(s => s.IsExternal)
            .Select(s => new {
                id = s.Id,
                name = s.ServiceName,
                url = s.ExternalUrl,
                port = s.Port,
                protocol = s.Protocol,
                app = s.Application?.Name
            })));

        const dependencies = @Html.Raw(Json.Serialize(Model.Dependencies.Select(d => new {
            from = d.SourceServiceId,
            to = d.TargetServiceId,
            fromServer = d.SourceService?.Server?.Id,
            toServer = d.TargetService?.Server?.Id,
            sourceService = d.SourceService?.ServiceName,
            targetService = d.TargetService?.ServiceName,
            description = d.Description,
            fromExternal = d.SourceService?.IsExternal ?? false,
            toExternal = d.TargetService?.IsExternal ?? false
        })));

        console.log('Servers:', servers);
        console.log('Dependencies:', dependencies);

        // Create nodes for servers
        const nodes = new vis.DataSet();
        const edges = new vis.DataSet();

        if (servers.length === 0) {
            document.getElementById('deploymentNetwork').innerHTML = '<div class="alert alert-info m-4">No servers with services found. Please add some servers and services first.</div>';
            return;
        }

        servers.forEach(server => {
            // Create HTML content for services inside server box
            const serviceBoxes = server.services.map(s => {
                const statusColor = s.status === 'running' ? '#4CAF50' : '#F44336';
                return `<div style="background:${statusColor}; color:white; padding:2px 5px; margin:2px; border-radius:3px; font-size:10px; display:inline-block;">
                    ${s.name}:${s.port}
                </div>`;
            }).join('');

            const envColor = {
                'production': '#dc3545',
                'staging': '#ffc107',
                'development': '#17a2b8',
                'testing': '#28a745'
            }[server.environment] || '#6c757d';

            // Create server node with larger size to contain services
            nodes.add({
                id: `server-${server.id}`,
                label: `<<b>${server.hostname}</b>\n${server.ip || 'N/A'}\n──────────\n${server.services.map(s => `${s.name}:${s.port}`).join('\n')}>`,
                title: `<strong>${server.hostname}</strong><br>
                    IP: ${server.ip || 'N/A'}<br>
                    OS: ${server.os || 'N/A'}<br>
                    Environment: ${server.environment}<br>
                    Status: ${server.status}<br>
                    <hr>
                    <strong>Services:</strong><br>
                    ${serviceBoxes}`,
                shape: 'box',
                shapeProperties: {
                    borderRadius: 5
                },
                color: {
                    background: '#ffffff',
                    border: envColor,
                    highlight: {
                        background: '#f5f5f5',
                        border: envColor
                    }
                },
                font: { color: '#333', size: 12, multi: true },
                borderWidth: 3,
                margin: 10,
                widthConstraint: { minimum: 150, maximum: 250 },
                heightConstraint: { minimum: 100 }
            });

            // Add service nodes (hidden by default, used for dependency connections)
            server.services.forEach(service => {
                nodes.add({
                    id: `service-${service.id}`,
                    label: service.name,
                    hidden: true,
                    physics: false
                });
            });
        });

        // Add external service nodes (cloud shape)
        externalServices.forEach(service => {
            nodes.add({
                id: `service-${service.id}`,
                label: `☁ ${service.name}\n${service.url ? service.url.replace('https://', '') : ''}`,
                title: `<strong>External Service: ${service.name}</strong><br>
                    URL: ${service.url || 'N/A'}<br>
                    Protocol: ${service.protocol}<br>
                    Port: ${service.port}<br>
                    App: ${service.app || 'N/A'}`,
                shape: 'ellipse',
                color: {
                    background: '#E3F2FD',
                    border: '#1976D2',
                    highlight: {
                        background: '#BBDEFB',
                        border: '#1565C0'
                    }
                },
                font: { color: '#1976D2', size: 11 },
                borderWidth: 2,
                borderWidthSelected: 3,
                margin: 10
            });
        });

        // Create edges for dependencies
        dependencies.forEach(dep => {
            const fromNode = dep.fromExternal ? `service-${dep.from}` :
                            (dep.fromServer ? `server-${dep.fromServer}` : null);
            const toNode = dep.toExternal ? `service-${dep.to}` :
                          (dep.toServer ? `server-${dep.toServer}` : null);

            if (fromNode && toNode) {
                edges.add({
                    from: fromNode,
                    to: toNode,
                    arrows: 'to',
                    label: dep.description ? dep.description.substring(0, 30) + '...' : '',
                    title: `${dep.sourceService} → ${dep.targetService}<br/>${dep.description}`,
                    color: {
                        color: dep.fromExternal || dep.toExternal ? '#FF9800' : '#2196F3',
                        highlight: dep.fromExternal || dep.toExternal ? '#FF6F00' : '#1976D2'
                    },
                    width: 2,
                    smooth: { type: 'curvedCW', roundness: 0.2 },
                    dashes: dep.fromExternal || dep.toExternal ? [5, 5] : false
                });
            }
        });

        // Create network
        const container = document.getElementById('deploymentNetwork');
        const data = { nodes: nodes, edges: edges };
        const options = {
            layout: {
                randomSeed: 2,
                improvedLayout: true
            },
            physics: {
                enabled: physicsEnabled,
                stabilization: {
                    iterations: 1000
                },
                barnesHut: {
                    gravitationalConstant: -8000,
                    springConstant: 0.04,
                    springLength: 200
                }
            },
            interaction: {
                hover: true,
                tooltipDelay: 0,
                navigationButtons: true,
                keyboard: true,
                zoomSpeed: 0.5
            },
            nodes: {
                borderWidth: 2,
                shadow: true
            },
            edges: {
                shadow: true
            }
        };

        deploymentNetwork = new vis.Network(container, data, options);

        // Custom tooltip handler
        const tooltip = document.createElement('div');
        tooltip.style.position = 'absolute';
        tooltip.style.visibility = 'hidden';
        tooltip.style.backgroundColor = 'rgba(0, 0, 0, 0.9)';
        tooltip.style.color = 'white';
        tooltip.style.padding = '10px';
        tooltip.style.borderRadius = '5px';
        tooltip.style.fontSize = '12px';
        tooltip.style.zIndex = '1000';
        tooltip.style.maxWidth = '300px';
        document.body.appendChild(tooltip);

        deploymentNetwork.on("hoverNode", function (params) {
            const node = nodes.get(params.node);
            if (node && node.title) {
                tooltip.innerHTML = node.title;
                tooltip.style.visibility = 'visible';
            }
        });

        deploymentNetwork.on("blurNode", function (params) {
            tooltip.style.visibility = 'hidden';
        });

        deploymentNetwork.on("hoverEdge", function (params) {
            const edge = edges.get(params.edge);
            if (edge && edge.title) {
                tooltip.innerHTML = edge.title;
                tooltip.style.visibility = 'visible';
            }
        });

        deploymentNetwork.on("blurEdge", function (params) {
            tooltip.style.visibility = 'hidden';
        });

        // Update tooltip position on mouse move
        container.addEventListener('mousemove', function(e) {
            tooltip.style.left = e.pageX + 10 + 'px';
            tooltip.style.top = e.pageY + 10 + 'px';
        });

        // Add double-click event to navigate to details
        deploymentNetwork.on("doubleClick", function(params) {
            if (params.nodes.length > 0) {
                const nodeId = params.nodes[0];
                if (nodeId.startsWith('server-')) {
                    const serverId = nodeId.replace('server-', '');
                    window.location.href = `/Servers/Details/${serverId}`;
                } else if (nodeId.startsWith('service-') && !nodeId.includes('external')) {
                    const serviceId = nodeId.replace('service-', '');
                    window.location.href = `/Services/Details/${serviceId}`;
                }
            }
        });
    }

    function initDependencyNetwork() {
        const services = @Html.Raw(Json.Serialize(Model.Services.Select(s => new {
            id = s.Id,
            name = s.ServiceName,
            server = s.Server?.Hostname,
            app = s.Application?.Name,
            status = s.Status
        })));

        const dependencies = @Html.Raw(Json.Serialize(Model.Dependencies.Select(d => new {
            from = d.SourceServiceId,
            to = d.TargetServiceId,
            description = d.Description
        })));

        // Create nodes for services
        const nodes = new vis.DataSet();
        services.forEach(service => {
            const statusColor = service.status === 'running' ? '#28a745' :
                               service.status === 'stopped' ? '#dc3545' : '#ffc107';

            nodes.add({
                id: service.id,
                label: `${service.name}\n[${service.server}]`,
                title: `Service: ${service.name}<br/>Server: ${service.server}<br/>App: ${service.app || 'N/A'}<br/>Status: ${service.status}`,
                shape: 'box',
                color: {
                    background: statusColor,
                    border: '#fff'
                },
                font: { color: 'white' },
                borderWidth: 2
            });
        });

        // Create edges for dependencies
        const edges = new vis.DataSet();
        dependencies.forEach(dep => {
            edges.add({
                from: dep.from,
                to: dep.to,
                arrows: 'to',
                label: dep.description ? dep.description.substring(0, 20) + '...' : '',
                title: dep.description,
                color: { color: '#007bff' },
                width: 2,
                smooth: { type: 'curvedCW' }
            });
        });

        // Create network
        const container = document.getElementById('dependencyNetwork');
        const data = { nodes: nodes, edges: edges };
        const options = {
            layout: {
                improvedLayout: true
            },
            physics: {
                enabled: true,
                stabilization: {
                    iterations: 1000
                },
                barnesHut: {
                    gravitationalConstant: -8000,
                    springConstant: 0.04
                }
            },
            interaction: {
                hover: true,
                navigationButtons: true,
                keyboard: true
            }
        };

        dependencyNetwork = new vis.Network(container, data, options);

        // Add double-click event to navigate to service details
        dependencyNetwork.on("doubleClick", function(params) {
            if (params.nodes.length > 0) {
                window.location.href = `/Services/Details/${params.nodes[0]}`;
            }
        });
    }

    function resetDeploymentView() {
        if (deploymentNetwork) {
            deploymentNetwork.fit();
        }
    }

    function resetDependencyView() {
        if (dependencyNetwork) {
            dependencyNetwork.fit();
        }
    }

    function togglePhysics() {
        physicsEnabled = !physicsEnabled;
        if (deploymentNetwork) {
            deploymentNetwork.setOptions({ physics: { enabled: physicsEnabled } });
        }
    }
</script>
}